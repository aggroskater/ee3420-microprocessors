; vim: set filetype=asmhc12:
;THESE INCLUDE FILES SHOULD APPEAR AT THE BEGINNING BEFORE YOUR CODE AND DATA
#INCLUDE ../HC12TOOLS.INC

	ORG $1000
CHAR1		DS.B 1		;DEFINES UNINITIALIZED STORAGE SIZED AS 1 BYTE
CHAR2 	DC.B 'L'		;DEFINES STORAGE FOR A SINGLE BYTE INITIALIZED TO THE ASCII CODE FOR 'Z'
STR1		DS.B 80		;DEFINES UNINITIALIZED STORAGE OF 80 BYTES APPROPRIATE FOR A STRING OF CHARACTERS
STR2		DC.B "Sample String 12345 <->(-){-}[-]",CR,LF,NULL	;DEFINES A STRING OF INITIALIZED CHARACTERS
					;NOTE THAR CR,LF, AND NULL ARE ASCII CODES DEFINED IN "ASCII.INC"
INT1		DS.W 1		;DEFINES UNINITIALIZED STORAGE FOR 1 WORD-LENGTH INTEGER.  1 WORD IS 2 BYTES LONG
INT2		DC.W 123		;DEFINES A WORD-LENGTH INTEGER INITIALIZED TO DECIMAL 123
NEWLINE 	DC.B CR,LF,NULL	;DEFINES A STRING OF THREE CHARACTERS CONSISTING OF CARRIAGE RETURN (CR), LINE FEED (LF), AND NULL 
PROMPT1	DC.B "THE NEXT FEW LINES SHOULD EXERCISE THE PUTC AND PUTS OPTIONS FOR SCI0", CR,LF, NULL
PROMPT2	DC.B "INPUT A SINGLE CHARACTER (VIA GETC).  IT WILL BE ECHOED (VIA PUTC).",CR,LF
		DC.B "THEN INPUT A STRING (VIA GETS) AND IT, TOO, WILL BE ECHOED (VIA PUTS).",CR,LF,NULL
PROMPT3	DC.B "THE NEXT THREE LINES ARE THE ORIGINAL STRING, ALL LOWER CASE (VIA LCASE), AND ALL UPPER CASE (VIA UCASE)",CR,LF,NULL
PROMPT4	DC.B "THE NEXT LINES ARE THE SAME INTEGER (123) CONVERTED TO ASCII STRING AS DECIMAL (VIA ITOA), BINARY (VIA ITOA_2), HEXADECIMAL (VIA ITOA_16),",CR,LF
		DC.B "FIXED-LENGTH DECIMAL (VIA ITOA_FIXED), FIXED-LENGTH BINARY (VIA ITOA_2_FIXED), AND FIXED-LENGTH HEXADECIMAL (VIA ITOA_16_FIXED)",CR,LF,NULL
PROMPT5	DC.B "LOADING A NEW STRING ",'"',"100",'"'," THEN CONVERTING TO INTEGER INTERPRETED AS DECIMAL (VIA ATOI), BINARY (VIA ATOI_2), AND HEXADECIMAL (VIA ATOI_16).",CR,LF
		DC.B "ALL ARE ECHOED IN DECIMAL (VIA ITOA)",CR,LF
		DC.B "THEN LOAD A STRING ",'"', "17F", '"', " AND READ AS HEXADECIMAL.  ECHO IN DECIMAL (383)",CR,LF,NULL
PROMPT6 	DC.B "PRESS A KEY ON THE KEYPAD (READ VIA GETC_KEYPAD).  IT WILL BE ECHOED.", CR,LF
		DC.B "THEN A MESSAGE SHOULD APPEAR ON THE LCD SCREEN.",CR,LF,NULL
FORMAT1	DC.B "INTEGER AT ADDRESS $%x IS %i",CR,LF,"%s",CR,LF,NULL
PROMPT7	DC.B "CALCULATING THE LENGTH OF STR2 (USING STRLEN_DBUG12) AND OUTPUTTING RESULTS FORMATTING (USING PRINTF_DBUG12)",CR,LF,NULL
PROMPT8	DC.B "INPUT A SINGLE CHARACTER (VIA GETCHAR_DBUG12) AND IT WILL BE ECHOED ON THE NEXT LINE (VIA PUTCHAR_DBUG12)",CR,LF
		DC.B "NOTE THAT IT WILL NOT APPEAR WHEN GETCHAR_DBUG12 READS THE CHARACTER.  THIS IS DIFFERENT FROM GETC_SCI0.",CR,LF,NULL
PROMPT9	DC.B "OUTPUTS STR1 THEN STR2, THEN USES STRCPY_DBUG12 TO OVERWRITE STR1 WITH A COPY OF STR2, THEN OUTPUTS STR1 AND STR2 AGAIN",CR,LF,NULL

	ORG $2000
MAIN:
	LIBRARY_VERSION			;OUTPUT A MESSAGE VIA SCI0 SHOWING THE VERSION OF THE FLASH LIBRARY IN USE.  IF NO MESSAGE APPEARS, SEE THE LAB INSTRUCTOR.

	LDAB #'H'				;LOAD THE ASCII CODE FOR 'H' INTO REGISTER B
	PUTC_SCI0				;PUTC WITH NO PARAMETERS OUTPUTS CHARACTER IN REGISTER B
	LDAB #'E'
	PUTC					;SCI0 IS THE DEFAULT I/O PORT SO PUTC IS EQUIVALENT TO PUTC_SCI0	
	PUTC_SCI0 CHAR2			;PUTC WITH 1 PARAMETER OUTPUTS CHARACTER REFERENCED BY PARAMETER (CHAR2 WAS DEFINED AS 'L')
	PUTC CHAR2				;PUTC = PUTC_SCI0
	PUTC #'O'				;THE PUTC PARAMETER MAY EITHER BE THE ADDRESS OF A CHARACTER OR THE ASCII CODE AS AN IMMEDIATE VALUE

	PUTS_SCI0 #NEWLINE		;PUTS_SCI0 NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
						;NEWLINE IS 3 CHARACTERS WHICH TELL THE TERMINAL TO MOVE THE CURSOR TO THE LEFT EDGE (CR), MOVE TO THE NEXT LINE (LF), AND INDICATE THE END OF THE STRING (NULL)

	PUTS_SCI0 #PROMPT1		;BEGINNING AT THE ADDRESS DEFINED AS THE VALUE OF THE LABEL PROMPT1, OUTPUT EVERY BYTE AS AN ASCII CHARACTER TO RS-232 PORT SCI0 UNTIL REACHING THE FIRST NULL (ZERO).

	PUTS #STR2				;PUTS = PUTS_SCI0

	PUTS #PROMPT2			;PROMPT TO INPUT FIRST A CHARACTER THEN A STRING VIA SCI0

	GETC_SCI0 				;GETC WITH NO PARAMETERS INPUTS TO REGISTER B
						;NOTE: GETC = GETC_SCI0
	PUTS #NEWLINE			;MOVE CURSOR TO NEXT LINE

	PUTC_SCI0				;PUTC WITH NO PARAMETERS OUTPUTS CHARACTER IN REGISTER B
	PUTS #NEWLINE		

	GETS_SCI0 #STR1			;GETS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
						;NOTE: GETS = GETS_SCI0
	PUTS #NEWLINE		

	PUTS #STR1			
	PUTS #NEWLINE		

	PUTS_SCI0 #PROMPT3

	PUTS #STR2			

	LCASE #STR2			;CONVERTS ALL ALPHABETICAL CHARACTERS IN STRING TO LOWER CASE
						;LCASE NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
	PUTS #STR2			

	UCASE #STR2			;CONVERTS ALL ALPHABETICAL CHARACTERS IN STRING TO UPPER CASE
						;UCASE NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
	PUTS #STR2			

	PUTS #PROMPT4		

	ITOA INT2, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	ITOA_2 INT2, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	ITOA_16 INT2, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	ITOA_FIXED INT2, #STR1	;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	ITOA_2_FIXED INT2, #STR1	;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	ITOA_16_FIXED INT2, #STR1	;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	PUTS #PROMPT5		

	MOVB #'1',STR1			;CREATE A STRING "100" WHICH IS NULL-TERMINATED
	MOVB #'0',STR1+1
	MOVB #'0',STR1+2
	MOVB #NULL,STR1+3
	PUTS #STR1			
	PUTS #NEWLINE		

	ATOI #STR1, INT1
	ITOA INT1, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	MOVB #'1',STR1
	MOVB #'0',STR1+1
	MOVB #'0',STR1+2
	MOVB #NULL,STR1+3

	ATOI_2 #STR1, INT1
	ITOA INT1, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

	MOVB #'1',STR1
	MOVB #'0',STR1+1
	MOVB #'0',STR1+2
	MOVB #NULL,STR1+3

	ATOI_16 #STR1, INT1
	ITOA INT1, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE	
	PUTS #NEWLINE	

	MOVB #'1',STR1
	MOVB #'7',STR1+1
	MOVB #'F',STR1+2
	MOVB #NULL,STR1+3
	PUTS #STR1			
	PUTS #NEWLINE		

	ATOI_16 #STR1, INT1
	ITOA INT1, #STR1		;CONVERT THE INTEGER INTO AN ASCII STRING
	PUTS #STR1			
	PUTS #NEWLINE		

 
	PUTS_SCI0 #PROMPT6		;PUTS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING

	GETC_KEYPAD 			;GETC WITH NO PARAMETERS INPUTS TO REGISTER B
	PUTS_SCI0 #NEWLINE		;PUTS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING

	PUTC_SCI0				;PUTC WITH NO PARAMETERS OUTPUTS CHARACTER IN REGISTER B
	PUTS_SCI0 #NEWLINE		;PUTS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING

	LCD_SETUP				;INITIALIZE THE LCD SCREEN

	LCD_CURSOR 0,0			;MOVE THE LCD CURSOR TO ROW 0 COLUMN 0
	PUTC_LCD 				;PUT A CHARACER TO LCD

	LCD_CURSOR 1,0			;MOVE THE LCD CURSOR TO ROW 1, COLUMN 0

	PUTS_LCD #STR2
	

	PUTS #NEWLINE		

	PUTS #PROMPT7

	STRLEN_DBUG12 #STR2		;IF USING D-BUG12 AS AN OS, CALCULATE THE LENGTH OF THE STRING
	STD INT1				;STORE THE LENGTH OF THE STRING INTO INT1
	PRINTF_DBUG12 #FORMAT1, #INT1, INT1, #STR2		;PRINT THE STRING USING PRINTF BUILT INTO D-BUG12

	PUTS #NEWLINE		

	PUTS #PROMPT8

	GETCHAR_DBUG12			;THIS IS THE EQUIVALENT TO THE GETC ROUTINES INCLUDED IN D-BUG12
	PRINTF_DBUG12 #NEWLINE
	PUTCHAR_DBUG12			;THIS IS THE EQUIVALENT TO THE PUTC ROUTINES INCLUDED IN D-BUG12
	PRINTF_DBUG12 #NEWLINE


	PUTS #PROMPT9

	PRINTF_DBUG12 #STR1
	PRINTF_DBUG12 #NEWLINE
	PRINTF_DBUG12 #STR2
	STRCPY_DBUG12 #STR1, #STR2		;STRING COPY, REQUIRES D-BUG 12, OVERWRITES STR1 WITH STR2
	PRINTF_DBUG12 #STR1
	PRINTF_DBUG12 #STR2

	PUTS #NEWLINE		
	PUTS #NEWLINE		

	RTS
