lab2-sample.lst - generated by MGTEK Assembler ASM12 V1.17 Build 107 for Linux (x86) - Wed Jun  5 14:29:59 2013

    1:                                 ; vim: set filetype=asmhc12:
    2:                                 ;THESE INCLUDE FILES SHOULD APPEAR AT THE BEGINNING BEFORE YOUR CODE AND DATA
    3:                                 #INCLUDE ../HC12TOOLS.INC
../HC12TOOLS.INC:1: Note A5001: col(6) "HC12TOOLS.INC REVISION 03/27/2013"
    1:                                 #MSG "HC12TOOLS.INC REVISION 03/27/2013"
../HC12TOOLS.INC:2: Note A5001: col(6) "COPYRIGHT 2013 WILLIAM STAPLETON"
    2:                                 #MSG "COPYRIGHT 2013 WILLIAM STAPLETON"
../HC12TOOLS.INC:3: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    3:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
../HC12TOOLS.INC:4: Note A5001: col(6) "THIS LIBRARY IS INTENDED FOR USE WITH THE ASM12 ASSEMBLER PROVIDED AS PART OF"
    4:                                 #MSG "THIS LIBRARY IS INTENDED FOR USE WITH THE ASM12 ASSEMBLER PROVIDED AS PART OF"
../HC12TOOLS.INC:5: Note A5001: col(6) "THE MINIIDE PROGRAM AVAILABLE FROM HTTP://WWW.MGTEK.COM/MINIIDE"
    5:                                 #MSG "THE MINIIDE PROGRAM AVAILABLE FROM HTTP://WWW.MGTEK.COM/MINIIDE"
../HC12TOOLS.INC:6: Note A5001: col(6) "CONDITIONAL ASSEMBLY AND MACROS MAY NOT FUNCTION IN THE CORRECT MANNER WITH OTHER ASSEMBLERS."
    6:                                 #MSG "CONDITIONAL ASSEMBLY AND MACROS MAY NOT FUNCTION IN THE CORRECT MANNER WITH OTHER ASSEMBLERS."
    7:                                 
    8:                                 #INCLUDE CONSTANTS.INC                  ;USEFUL GLOBAL CONSTANTS
    1:                                 #IFNDEF CONSTANTS_INC
    2:          =00000001              CONSTANTS_INC   EQU 1
../CONSTANTS.INC:3: Note A5001: col(6) "CONSTANTS.INC REVISION 08/20/2010"
    3:                                 #MSG "CONSTANTS.INC REVISION 08/20/2010"
../CONSTANTS.INC:4: Note A5001: col(6) "COPYRIGHT 2010 WILLIAM STAPLETON"
    4:                                 #MSG "COPYRIGHT 2010 WILLIAM STAPLETON"
../CONSTANTS.INC:5: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    5:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    6:                                 
    7:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
   62:                                 
   63:                                 #ENDIF  
    9:                                 #INCLUDE SYSTEM_SELECT.INC              ;BOARD-SPECIFIC OPTIONS
    1:                                 #IFNDEF SYSTEM_SELECT
    2:          =00000001              SYSTEM_SELECT EQU 1
../SYSTEM_SELECT.INC:3: Note A5001: col(6) "SYSTEM_SELECT.INC REVISION 01/27/2012"
    3:                                 #MSG "SYSTEM_SELECT.INC REVISION 01/27/2012"
../SYSTEM_SELECT.INC:4: Note A5001: col(6) "COPYRIGHT 2012 WILLIAM STAPLETON"
    4:                                 #MSG "COPYRIGHT 2012 WILLIAM STAPLETON"
../SYSTEM_SELECT.INC:5: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    5:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    6:                                 
    7:                                 #INCLUDE CONSTANTS.INC
    1:                                 #IFNDEF CONSTANTS_INC
   63:                                 #ENDIF  
    8:                                 
    9:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
  512:                                 
  513:                                 #ENDIF ;SYSTEM_SELECT
   10:                                 #INCLUDE MC9S12_REGISTERS.INC           ;DEFINITIONS OF ALL SYSTEM MEMORY LOCATIONS AND CONSTANTS
    1:                                 #IFNDEF MC9S12REGS
    2:          =00000001              MC9S12REGS      EQU 1
../MC9S12_REGISTERS.INC:3: Note A5001: col(6) "MC9S12_REGISTERS.INC REVISION 08/06/2010"
    3:                                 #MSG "MC9S12_REGISTERS.INC REVISION 08/06/2010"
../MC9S12_REGISTERS.INC:4: Note A5001: col(6) "COPYRIGHT 2010 WILLIAM STAPLETON"
    4:                                 #MSG "COPYRIGHT 2010 WILLIAM STAPLETON"
../MC9S12_REGISTERS.INC:5: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    5:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    6:                                 
    7:                                 #INCLUDE SYSTEM_SELECT.INC
    1:                                 #IFNDEF SYSTEM_SELECT
  513:                                 #ENDIF ;SYSTEM_SELECT
    8:                                 #INCLUDE CONSTANTS.INC
    1:                                 #IFNDEF CONSTANTS_INC
   63:                                 #ENDIF  
    9:                                 
   10:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
 1489:                                 
 1490:                                 ;* end registers
 1491:                                 #ENDIF  ;MC9S12REGS
   11:                                 #INCLUDE ASCII.INC                      ;DEFINITIONS OF ALL ASCII CONTROL CODES
    1:                                 #IFNDEF ASCII_INC       ;using definition to prevent duplication of equates
    2:          =00000001              ASCII_INC EQU 1
../ASCII.INC:3: Note A5001: col(6) "ASCII.INC REVISION 01/15/2013"
    3:                                 #MSG "ASCII.INC REVISION 01/15/2013"
../ASCII.INC:4: Note A5001: col(6) "COPYRIGHT 2013 WILLIAM STAPLETON"
    4:                                 #MSG "COPYRIGHT 2013 WILLIAM STAPLETON"
../ASCII.INC:5: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    5:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    6:                                 
    7:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
  204:                                 
  205:                                 #ENDIF          ;#IFNDEF ASCII_INC
   12:                                 #INCLUDE MUSIC_NOTES.INC
    1:                                 #IFNDEF MUSIC_NOTES_INC
    2:          =00000001              MUSIC_NOTES_INC EQU 1
../MUSIC_NOTES.INC:3: Note A5001: col(6) "MUSIC_NOTES.INC REVISION 08/06/2010"
    3:                                 #MSG "MUSIC_NOTES.INC REVISION 08/06/2010"
../MUSIC_NOTES.INC:4: Note A5001: col(6) "COPYRIGHT 2010 WILLIAM STAPLETON"
    4:                                 #MSG "COPYRIGHT 2010 WILLIAM STAPLETON"
../MUSIC_NOTES.INC:5: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    5:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    6:                                 
    7:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
  265:                                 
  266:                                 #ENDIF  ;;;#IFNDEF MUSIC_NOTES_INC
  267:                                 
   13:                                 #INCLUDE VT100.INC
    1:                                 #IFNDEF VT100_INC
    2:          =00000001              VT100_INC       EQU 1
../VT100.INC:3: Note A5001: col(6) "VT100.INC REVISION 09/15/2010"
    3:                                 #MSG "VT100.INC REVISION 09/15/2010"
../VT100.INC:4: Note A5001: col(6) "COPYRIGHT 2010 WILLIAM STAPLETON"
    4:                                 #MSG "COPYRIGHT 2010 WILLIAM STAPLETON"
../VT100.INC:5: Note A5001: col(6) "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    5:                                 #MSG "THIS FILE MAY BE FREELY DISTRIBUTED AS LONG AS IT REMAINS UNCHANGED AND FULLY CREDITED."
    6:                                 
    7:                                 #INCLUDE ASCII.INC
    1:                                 #IFNDEF ASCII_INC       ;using definition to prevent duplication of equates
  205:                                 #ENDIF          ;#IFNDEF ASCII_INC
    8:                                 
    9:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
   10:                                 ;       NOLIST
   11:                                 
   12:                                 VT100_MAKE_VARIABLES MACRO
   13:                                 #IFNDEF VT100_VARS
   14:                                 VT100_VARS EQU 1
   15:                                         JMP NEXT\@
   16:                                 #ENDIF
   17:                                 #IFNDEF VT100_PREFIX
   18:                                 VT100_PREFIX    DC.B ESC,'[',NULL
   19:                                 #ENDIF
   20:                                 #IFNDEF VT100_ATTRIBUTE_STRING
   21:                                 VT100_ATTRIBUTE_STRING DC.B '00000',NULL
   22:                                 #ENDIF
   23:                                 NEXT\@:
   24:                                         ENDM
   25:                                 
   26:                                 VT100_CLEAR_SCREEN MACRO
   27:                                         VT100_MAKE_VARIABLES
   28:                                         PUTS #VT100_PREFIX      
   29:                                         ITOA #2,#VT100_ATTRIBUTE_STRING
   30:                                         PUTS #VT100_ATTRIBUTE_STRING
   31:                                         PUTC #'J'
   32:                                         ENDM
   33:                                 
   34:                                 VT100_HOME MACRO        
   35:                                         VT100_MAKE_VARIABLES
   36:                                         PUTS #VT100_PREFIX      
   37:                                         PUTC #'H'
   38:                                         ENDM
   39:                                 
   40:                                 VT100_CURSOR MACRO ;ROW.COLUMN
   41:                                 #IF \# >=2
   42:                                         VT100_MAKE_VARIABLES
   43:                                         PUTS #VT100_PREFIX      
   44:                                         ITOA \1,#VT100_ATTRIBUTE_STRING
   45:                                         PUTS #VT100_ATTRIBUTE_STRING
   46:                                         PUTC #$3B
   47:                                         ITOA \2,#VT100_ATTRIBUTE_STRING
   48:                                         PUTS #VT100_ATTRIBUTE_STRING
   49:                                         PUTC #'H'
   50:                                 #ENDIF
   51:                                 #IF \# != 2
   52:                                 #MSG "MACRO VT100_CURSOR REQUIRES EXACTLY 2 PARAMETERS WHICH RESOLVE INTO NUMBERS FOR CURSOR ROW AND COLUMN"
   53:                                 #MSG "BOTH ROW AND COLUMN NUMBER BEGIN WITH 1 FOR THE TOP-LEFT CORNER"
   54:                                 #ENDIF
   55:                                         ENDM
   56:                                 
   57:                                 VT100_SAVE_CURSOR MACRO
   58:                                         VT100_MAKE_VARIABLES
   59:                                         PUTS #VT100_PREFIX      
   60:                                         PUTC #'s'
   61:                                         ENDM
   62:                                 
   63:                                 VT100_RESTORE_CURSOR MACRO
   64:                                         VT100_MAKE_VARIABLES
   65:                                         PUTS #VT100_PREFIX      
   66:                                         PUTC #'u'
   67:                                         ENDM
   68:                                 
   69:                                 VT100_UP MACRO ;COUNT
   70:                                         VT100_MAKE_VARIABLES
   71:                                         PUTS #VT100_PREFIX
   72:                                 #IF \# >= 1     
   73:                                         ITOA \1,#VT100_ATTRIBUTE_STRING
   74:                                         PUTS #VT100_ATTRIBUTE_STRING
   75:                                 #ENDIF
   76:                                         PUTC #'A'
   77:                                 #IF \# >= 2
   78:                                 #MSG "MACRO VT100_UP REQUIRES AT MOST 1 PARAMETER WHICH RESOLVE INTO THE NUMBERS OF ROWS TO MOVE"
   79:                                 #MSG "IF NO PARAMETER IS SPECIFIED, THE DEFAULT IS USED (TYPICALLY 1 ROW)"
   80:                                 #ENDIF
   81:                                         ENDM
   82:                                 
   83:                                 VT100_DOWN MACRO ;COUNT
   84:                                         VT100_MAKE_VARIABLES
   85:                                         PUTS #VT100_PREFIX
   86:                                 #IF \# >= 1     
   87:                                         ITOA \1,#VT100_ATTRIBUTE_STRING
   88:                                         PUTS #VT100_ATTRIBUTE_STRING
   89:                                 #ENDIF
   90:                                         PUTC #'B'
   91:                                 #IF \# >= 2
   92:                                 #MSG "MACRO VT100_DOWN REQUIRES AT MOST 1 PARAMETER WHICH RESOLVE INTO THE NUMBERS OF ROWS TO MOVE"
   93:                                 #MSG "IF NO PARAMETER IS SPECIFIED, THE DEFAULT IS USED (TYPICALLY 1 ROW)"
   94:                                 #ENDIF
   95:                                         ENDM
   96:                                 
   97:                                 VT100_RIGHT MACRO ;COUNT
   98:                                         VT100_MAKE_VARIABLES
   99:                                         PUTS #VT100_PREFIX
  100:                                 #IF \# >= 1     
  101:                                         ITOA \1,#VT100_ATTRIBUTE_STRING
  102:                                         PUTS #VT100_ATTRIBUTE_STRING
  103:                                 #ENDIF
  104:                                         PUTC #'C'
  105:                                 #IF \# >= 2
  106:                                 #MSG "MACRO VT100_RIGHT REQUIRES AT MOST 1 PARAMETER WHICH RESOLVES INTO THE NUMBERS OF COLUMNS TO MOVE"
  107:                                 #MSG "IF NO PARAMETER IS SPECIFIED, THE DEFAULT IS USED (TYPICALLY 1 COLUMN)"
  108:                                 #ENDIF
  109:                                         ENDM
  110:                                 
  111:                                 VT100_LEFT MACRO ;COUNT
  112:                                         VT100_MAKE_VARIABLES
  113:                                         PUTS #VT100_PREFIX
  114:                                 #IF \# >= 1     
  115:                                         ITOA \1,#VT100_ATTRIBUTE_STRING
  116:                                         PUTS #VT100_ATTRIBUTE_STRING
  117:                                 #ENDIF
  118:                                         PUTC #'D'
  119:                                 #IF \# >= 2
  120:                                 #MSG "MACRO VT100_LEFT REQUIRES AT MOST 1 PARAMETER WHICH RESOLVES INTO THE NUMBERS OF COLUMNS TO MOVE"
  121:                                 #MSG "IF NO PARAMETER IS SPECIFIED, THE DEFAULT IS USED (TYPICALLY 1 COLUMN)"
  122:                                 #ENDIF
  123:                                         ENDM
  124:                                 
  125:          =00000000              VT100_DEFAULT   EQU 0
  126:          =00000001              VT100_BRIGHT    EQU 1
  127:          =00000002              VT100_DIM               EQU 2
  128:          =00000004              VT100_UNDERLINE EQU 4
  129:          =00000005              VT100_BLINK     EQU 5
  130:          =00000007              VT100_INVERT    EQU 7
  131:          =00000008              VT100_HIDDEN    EQU 8
  132:          =0000001E              VT100_FOREGROUND_PREFIX EQU 30
  133:          =00000028              VT100_BACKGROUND_PREFIX EQU 40
  134:          =00000000              VT100_BLACK     EQU 0
  135:          =00000001              VT100_RED               EQU 1
  136:          =00000002              VT100_GREEN     EQU 2
  137:          =00000003              VT100_YELLOW    EQU 3           ;YELLOW=RED+GREEN               
  138:          =00000004              VT100_BLUE              EQU 4
  139:          =00000005              VT100_MAGENTA   EQU 5           ;MAGENTA=BLUE+RED       
  140:          =00000006              VT100_CYAN              EQU 6           ;CYAN=BLUE+GREEN                
  141:          =00000007              VT100_WHITE     EQU 7           ;WHITE=BLUE+GREEN+RED   
  142:                                 
  143:                                 
  144:                                 VT100_TEXT_ATTRIBUTE MACRO ;PARAMETERS
  145:                                         VT100_MAKE_VARIABLES
  146:                                         PUTS #VT100_PREFIX
  147:                                 #IF \# = 0
  148:                                         ITOA #VT100_DEFAULT,#VT100_ATTRIBUTE_STRING
  149:                                         PUTS #VT100_ATTRIBUTE_STRING
  150:                                 #ENDIF
  151:                                 #IF \# >=1      
  152:                                         ITOA \1,#VT100_ATTRIBUTE_STRING
  153:                                         PUTS #VT100_ATTRIBUTE_STRING
  154:                                 #ENDIF
  155:                                 #IF \# >=2
  156:                                         PUTC #$3B       
  157:                                         ITOA \2,#VT100_ATTRIBUTE_STRING
  158:                                         PUTS #VT100_ATTRIBUTE_STRING
  159:                                 #ENDIF
  160:                                 #IF \# >=3
  161:                                         PUTC #$3B       
  162:                                         ITOA \3,#VT100_ATTRIBUTE_STRING
  163:                                         PUTS #VT100_ATTRIBUTE_STRING
  164:                                 #ENDIF
  165:                                 #IF \# >=4
  166:                                         PUTC #$3B       
  167:                                         ITOA \4,#VT100_ATTRIBUTE_STRING
  168:                                         PUTS #VT100_ATTRIBUTE_STRING
  169:                                 #ENDIF
  170:                                 #IF \# >=5
  171:                                         PUTC #$3B       
  172:                                         ITOA \5,#VT100_ATTRIBUTE_STRING
  173:                                         PUTS #VT100_ATTRIBUTE_STRING
  174:                                 #ENDIF
  175:                                 #IF \# >=6
  176:                                         PUTC #$3B       
  177:                                         ITOA \6,#VT100_ATTRIBUTE_STRING
  178:                                         PUTS #VT100_ATTRIBUTE_STRING
  179:                                 #ENDIF
  180:                                 #IF \# >=7
  181:                                         PUTC #$3B       
  182:                                         ITOA \7,#VT100_ATTRIBUTE_STRING
  183:                                         PUTS #VT100_ATTRIBUTE_STRING
  184:                                 #ENDIF
  185:                                         PUTC #'m'
  186:                                 #IF \# =0 | \# > 7
  187:                                 #MSG "MACRO VT100_TEXT_ATTRIBUTE REQUIRES UP TO 7 PARAMETERS WHICH RESOLVE INTO VT100 TEXT ATTRIBUTES"
  188:                                 #MSG "EXAMPLE ATTRIBUTES ARE VT100_BRIGHT, VT100_UNDERLINE, AND VT100_BLINK"
  189:                                 #MSG "EXAMPLE TO SET BACKGROUND COLOR USE: VT100_TEXT_ATTRIBUTE #(VT100_BACKGROUND_PREFIX+VT100_RED)"
  190:                                 #MSG "EXAMPLE TO SET FOREGROUND COLOR USE: VT100_TEXT_ATTRIBUTE #(VT100_FOREGROUND_PREFIX+VT100_GREEN)"
  191:                                 #MSG "VT100_DEFAULT REMOVES ALL OTHER ATTRIBUTES, INCLUDING TEXT COLOR"
  192:                                 #MSG "MORE THAN 7 PARAMETERS AT A TIME IS DISALLOWED"
  193:                                 #MSG "PROVIDING 0 PARAMETERS IS EQUIVALENT TO SETTING VT100_DEFAULT"
  194:                                 #ENDIF
  195:                                         ENDM
  196:                                 
  197:                                 
  198:                                 
  199:                                 
  200:                                 
  201:                                 
  202:                                 
  203:                                 ;THE FOLLOWING LINE RESTORES LISTING FOR CODE OUTSIDE OF THIS LIBRARY
  205:                                 
  206:                                 #ENDIF  
   14:                                 
   15:                                 ;COMMENT OUT THE FOLLOWING LINE TO INCLUDE THE FULL FILE IN THE LISTING
    4:                                 
    5:          =00001000                      ORG $1000
    6:     1000 +0001                  CHAR1           DS.B 1          ;DEFINES UNINITIALIZED STORAGE SIZED AS 1 BYTE
    7:     1001 4C                     CHAR2   DC.B 'L'                ;DEFINES STORAGE FOR A SINGLE BYTE INITIALIZED TO THE ASCII CODE FOR 'Z'
    8:     1002 +0050                  STR1            DS.B 80         ;DEFINES UNINITIALIZED STORAGE OF 80 BYTES APPROPRIATE FOR A STRING OF CHARACTERS
    9:     1052 53 61 6D 70 6C 65      STR2            DC.B "Sample String 12345 <->(-){-}[-]",CR,LF,NULL      ;DEFINES A STRING OF INITIALIZED CHARACTERS
           1058 20 53 74 72 69 6E 
           105E 67 20 31 32 33 34 
           1064 35 20 3C 2D 3E 28 
           106A 2D 29 7B 2D 7D 5B 
           1070 2D 5D 0D 0A 00 
   10:                                                                         ;NOTE THAR CR,LF, AND NULL ARE ASCII CODES DEFINED IN "ASCII.INC"
   11:     1075 +0002                  INT1            DS.W 1          ;DEFINES UNINITIALIZED STORAGE FOR 1 WORD-LENGTH INTEGER.  1 WORD IS 2 BYTES LONG
   12:     1077 007B                   INT2            DC.W 123                ;DEFINES A WORD-LENGTH INTEGER INITIALIZED TO DECIMAL 123
   13:     1079 0D 0A 00               NEWLINE         DC.B CR,LF,NULL ;DEFINES A STRING OF THREE CHARACTERS CONSISTING OF CARRIAGE RETURN (CR), LINE FEED (LF), AND NULL 
   14:     107C 54 48 45 20 4E 45      PROMPT1 DC.B "THE NEXT FEW LINES SHOULD EXERCISE THE PUTC AND PUTS OPTIONS FOR SCI0", CR,LF, NULL
           1082 58 54 20 46 45 57 
           1088 20 4C 49 4E 45 53 
           108E 20 53 48 4F 55 4C 
           1094 44 20 45 58 45 52 
           109A 43 49 53 45 20 54 
           10A0 48 45 20 50 55 54 
           10A6 43 20 41 4E 44 20 
           10AC 50 55 54 53 20 4F 
           10B2 50 54 49 4F 4E 53 
           10B8 20 46 4F 52 20 53 
           10BE 43 49 30 0D 0A 00 
   15:     10C4 49 4E 50 55 54 20      PROMPT2 DC.B "INPUT A SINGLE CHARACTER (VIA GETC).  IT WILL BE ECHOED (VIA PUTC).",CR,LF
           10CA 41 20 53 49 4E 47 
           10D0 4C 45 20 43 48 41 
           10D6 52 41 43 54 45 52 
           10DC 20 28 56 49 41 20 
           10E2 47 45 54 43 29 2E 
           10E8 20 20 49 54 20 57 
           10EE 49 4C 4C 20 42 45 
           10F4 20 45 43 48 4F 45 
           10FA 44 20 28 56 49 41 
           1100 20 50 55 54 43 29 
           1106 2E 0D 0A 
   16:     1109 54 48 45 4E 20 49                      DC.B "THEN INPUT A STRING (VIA GETS) AND IT, TOO, WILL BE ECHOED (VIA PUTS).",CR,LF,NULL
           110F 4E 50 55 54 20 41 
           1115 20 53 54 52 49 4E 
           111B 47 20 28 56 49 41 
           1121 20 47 45 54 53 29 
           1127 20 41 4E 44 20 49 
           112D 54 2C 20 54 4F 4F 
           1133 2C 20 57 49 4C 4C 
           1139 20 42 45 20 45 43 
           113F 48 4F 45 44 20 28 
           1145 56 49 41 20 50 55 
           114B 54 53 29 2E 0D 0A 
           1151 00 
   17:     1152 54 48 45 20 4E 45      PROMPT3 DC.B "THE NEXT THREE LINES ARE THE ORIGINAL STRING, ALL LOWER CASE (VIA LCASE), AND ALL UPPER CASE (VIA UCASE)",CR,LF,NULL
           1158 58 54 20 54 48 52 
           115E 45 45 20 4C 49 4E 
           1164 45 53 20 41 52 45 
           116A 20 54 48 45 20 4F 
           1170 52 49 47 49 4E 41 
           1176 4C 20 53 54 52 49 
           117C 4E 47 2C 20 41 4C 
           1182 4C 20 4C 4F 57 45 
           1188 52 20 43 41 53 45 
           118E 20 28 56 49 41 20 
           1194 4C 43 41 53 45 29 
           119A 2C 20 41 4E 44 20 
           11A0 41 4C 4C 20 55 50 
           11A6 50 45 52 20 43 41 
           11AC 53 45 20 28 56 49 
           11B2 41 20 55 43 41 53 
           11B8 45 29 0D 0A 00 
   18:     11BD 54 48 45 20 4E 45      PROMPT4 DC.B "THE NEXT LINES ARE THE SAME INTEGER (123) CONVERTED TO ASCII STRING AS DECIMAL (VIA ITOA), BINARY (VIA ITOA_2), HEXADECIMAL (VIA ITOA_16),",CR,LF
           11C3 58 54 20 4C 49 4E 
           11C9 45 53 20 41 52 45 
           11CF 20 54 48 45 20 53 
           11D5 41 4D 45 20 49 4E 
           11DB 54 45 47 45 52 20 
           11E1 28 31 32 33 29 20 
           11E7 43 4F 4E 56 45 52 
           11ED 54 45 44 20 54 4F 
           11F3 20 41 53 43 49 49 
           11F9 20 53 54 52 49 4E 
           11FF 47 20 41 53 20 44 
           1205 45 43 49 4D 41 4C 
           120B 20 28 56 49 41 20 
           1211 49 54 4F 41 29 2C 
           1217 20 42 49 4E 41 52 
           121D 59 20 28 56 49 41 
           1223 20 49 54 4F 41 5F 
           1229 32 29 2C 20 48 45 
           122F 58 41 44 45 43 49 
           1235 4D 41 4C 20 28 56 
           123B 49 41 20 49 54 4F 
           1241 41 5F 31 36 29 2C 
           1247 0D 0A 
   19:     1249 46 49 58 45 44 2D                      DC.B "FIXED-LENGTH DECIMAL (VIA ITOA_FIXED), FIXED-LENGTH BINARY (VIA ITOA_2_FIXED), AND FIXED-LENGTH HEXADECIMAL (VIA ITOA_16_FIXED)",CR,LF,NULL
           124F 4C 45 4E 47 54 48 
           1255 20 44 45 43 49 4D 
           125B 41 4C 20 28 56 49 
           1261 41 20 49 54 4F 41 
           1267 5F 46 49 58 45 44 
           126D 29 2C 20 46 49 58 
           1273 45 44 2D 4C 45 4E 
           1279 47 54 48 20 42 49 
           127F 4E 41 52 59 20 28 
           1285 56 49 41 20 49 54 
           128B 4F 41 5F 32 5F 46 
           1291 49 58 45 44 29 2C 
           1297 20 41 4E 44 20 46 
           129D 49 58 45 44 2D 4C 
           12A3 45 4E 47 54 48 20 
           12A9 48 45 58 41 44 45 
           12AF 43 49 4D 41 4C 20 
           12B5 28 56 49 41 20 49 
           12BB 54 4F 41 5F 31 36 
           12C1 5F 46 49 58 45 44 
           12C7 29 0D 0A 00 
   20:     12CB 4C 4F 41 44 49 4E      PROMPT5 DC.B "LOADING A NEW STRING ",'"',"100",'"'," THEN CONVERTING TO INTEGER INTERPRETED AS DECIMAL (VIA ATOI), BINARY (VIA ATOI_2), AND HEXADECIMAL (VIA ATOI_16).",CR,LF
           12D1 47 20 41 20 4E 45 
           12D7 57 20 53 54 52 49 
           12DD 4E 47 20 22 31 30 
           12E3 30 22 20 54 48 45 
           12E9 4E 20 43 4F 4E 56 
           12EF 45 52 54 49 4E 47 
           12F5 20 54 4F 20 49 4E 
           12FB 54 45 47 45 52 20 
           1301 49 4E 54 45 52 50 
           1307 52 45 54 45 44 20 
           130D 41 53 20 44 45 43 
           1313 49 4D 41 4C 20 28 
           1319 56 49 41 20 41 54 
           131F 4F 49 29 2C 20 42 
           1325 49 4E 41 52 59 20 
           132B 28 56 49 41 20 41 
           1331 54 4F 49 5F 32 29 
           1337 2C 20 41 4E 44 20 
           133D 48 45 58 41 44 45 
           1343 43 49 4D 41 4C 20 
           1349 28 56 49 41 20 41 
           134F 54 4F 49 5F 31 36 
           1355 29 2E 0D 0A 
   21:     1359 41 4C 4C 20 41 52                      DC.B "ALL ARE ECHOED IN DECIMAL (VIA ITOA)",CR,LF
           135F 45 20 45 43 48 4F 
           1365 45 44 20 49 4E 20 
           136B 44 45 43 49 4D 41 
           1371 4C 20 28 56 49 41 
           1377 20 49 54 4F 41 29 
           137D 0D 0A 
   22:     137F 54 48 45 4E 20 4C                      DC.B "THEN LOAD A STRING ",'"', "17F", '"', " AND READ AS HEXADECIMAL.  ECHO IN DECIMAL (383)",CR,LF,NULL
           1385 4F 41 44 20 41 20 
           138B 53 54 52 49 4E 47 
           1391 20 22 31 37 46 22 
           1397 20 41 4E 44 20 52 
           139D 45 41 44 20 41 53 
           13A3 20 48 45 58 41 44 
           13A9 45 43 49 4D 41 4C 
           13AF 2E 20 20 45 43 48 
           13B5 4F 20 49 4E 20 44 
           13BB 45 43 49 4D 41 4C 
           13C1 20 28 33 38 33 29 
           13C7 0D 0A 00 
   23:     13CA 50 52 45 53 53 20      PROMPT6         DC.B "PRESS A KEY ON THE KEYPAD (READ VIA GETC_KEYPAD).  IT WILL BE ECHOED.", CR,LF
           13D0 41 20 4B 45 59 20 
           13D6 4F 4E 20 54 48 45 
           13DC 20 4B 45 59 50 41 
           13E2 44 20 28 52 45 41 
           13E8 44 20 56 49 41 20 
           13EE 47 45 54 43 5F 4B 
           13F4 45 59 50 41 44 29 
           13FA 2E 20 20 49 54 20 
           1400 57 49 4C 4C 20 42 
           1406 45 20 45 43 48 4F 
           140C 45 44 2E 0D 0A 
   24:     1411 54 48 45 4E 20 41                      DC.B "THEN A MESSAGE SHOULD APPEAR ON THE LCD SCREEN.",CR,LF,NULL
           1417 20 4D 45 53 53 41 
           141D 47 45 20 53 48 4F 
           1423 55 4C 44 20 41 50 
           1429 50 45 41 52 20 4F 
           142F 4E 20 54 48 45 20 
           1435 4C 43 44 20 53 43 
           143B 52 45 45 4E 2E 0D 
           1441 0A 00 
   25:     1443 49 4E 54 45 47 45      FORMAT1 DC.B "INTEGER AT ADDRESS $%x IS %i",CR,LF,"%s",CR,LF,NULL
           1449 52 20 41 54 20 41 
           144F 44 44 52 45 53 53 
           1455 20 24 25 78 20 49 
           145B 53 20 25 69 0D 0A 
           1461 25 73 0D 0A 00 
   26:     1466 43 41 4C 43 55 4C      PROMPT7 DC.B "CALCULATING THE LENGTH OF STR2 (USING STRLEN_DBUG12) AND OUTPUTTING RESULTS FORMATTING (USING PRINTF_DBUG12)",CR,LF,NULL
           146C 41 54 49 4E 47 20 
           1472 54 48 45 20 4C 45 
           1478 4E 47 54 48 20 4F 
           147E 46 20 53 54 52 32 
           1484 20 28 55 53 49 4E 
           148A 47 20 53 54 52 4C 
           1490 45 4E 5F 44 42 55 
           1496 47 31 32 29 20 41 
           149C 4E 44 20 4F 55 54 
           14A2 50 55 54 54 49 4E 
           14A8 47 20 52 45 53 55 
           14AE 4C 54 53 20 46 4F 
           14B4 52 4D 41 54 54 49 
           14BA 4E 47 20 28 55 53 
           14C0 49 4E 47 20 50 52 
           14C6 49 4E 54 46 5F 44 
           14CC 42 55 47 31 32 29 
           14D2 0D 0A 00 
   27:     14D5 49 4E 50 55 54 20      PROMPT8 DC.B "INPUT A SINGLE CHARACTER (VIA GETCHAR_DBUG12) AND IT WILL BE ECHOED ON THE NEXT LINE (VIA PUTCHAR_DBUG12)",CR,LF
           14DB 41 20 53 49 4E 47 
           14E1 4C 45 20 43 48 41 
           14E7 52 41 43 54 45 52 
           14ED 20 28 56 49 41 20 
           14F3 47 45 54 43 48 41 
           14F9 52 5F 44 42 55 47 
           14FF 31 32 29 20 41 4E 
           1505 44 20 49 54 20 57 
           150B 49 4C 4C 20 42 45 
           1511 20 45 43 48 4F 45 
           1517 44 20 4F 4E 20 54 
           151D 48 45 20 4E 45 58 
           1523 54 20 4C 49 4E 45 
           1529 20 28 56 49 41 20 
           152F 50 55 54 43 48 41 
           1535 52 5F 44 42 55 47 
           153B 31 32 29 0D 0A 
   28:     1540 4E 4F 54 45 20 54                      DC.B "NOTE THAT IT WILL NOT APPEAR WHEN GETCHAR_DBUG12 READS THE CHARACTER.  THIS IS DIFFERENT FROM GETC_SCI0.",CR,LF,NULL
           1546 48 41 54 20 49 54 
           154C 20 57 49 4C 4C 20 
           1552 4E 4F 54 20 41 50 
           1558 50 45 41 52 20 57 
           155E 48 45 4E 20 47 45 
           1564 54 43 48 41 52 5F 
           156A 44 42 55 47 31 32 
           1570 20 52 45 41 44 53 
           1576 20 54 48 45 20 43 
           157C 48 41 52 41 43 54 
           1582 45 52 2E 20 20 54 
           1588 48 49 53 20 49 53 
           158E 20 44 49 46 46 45 
           1594 52 45 4E 54 20 46 
           159A 52 4F 4D 20 47 45 
           15A0 54 43 5F 53 43 49 
           15A6 30 2E 0D 0A 00 
   29:     15AB 4F 55 54 50 55 54      PROMPT9 DC.B "OUTPUTS STR1 THEN STR2, THEN USES STRCPY_DBUG12 TO OVERWRITE STR1 WITH A COPY OF STR2, THEN OUTPUTS STR1 AND STR2 AGAIN",CR,LF,NULL
           15B1 53 20 53 54 52 31 
           15B7 20 54 48 45 4E 20 
           15BD 53 54 52 32 2C 20 
           15C3 54 48 45 4E 20 55 
           15C9 53 45 53 20 53 54 
           15CF 52 43 50 59 5F 44 
           15D5 42 55 47 31 32 20 
           15DB 54 4F 20 4F 56 45 
           15E1 52 57 52 49 54 45 
           15E7 20 53 54 52 31 20 
           15ED 57 49 54 48 20 41 
           15F3 20 43 4F 50 59 20 
           15F9 4F 46 20 53 54 52 
           15FF 32 2C 20 54 48 45 
           1605 4E 20 4F 55 54 50 
           160B 55 54 53 20 53 54 
           1611 52 31 20 41 4E 44 
           1617 20 53 54 52 32 20 
           161D 41 47 41 49 4E 0D 
           1623 0A 00 
   30:                                 
   31:          =00002000                      ORG $2000
   32:     2000                        MAIN:
   33:                                         LIBRARY_VERSION                 ;OUTPUT A MESSAGE VIA SCI0 SHOWING THE VERSION OF THE FLASH LIBRARY IN USE.  IF NO MESSAGE APPEARS, SEE THE LAB INSTRUCTOR.
   34:                                 
   35:     2004 C6 48                          LDAB #'H'                               ;LOAD THE ASCII CODE FOR 'H' INTO REGISTER B
   36:                                         PUTC_SCI0                               ;PUTC WITH NO PARAMETERS OUTPUTS CHARACTER IN REGISTER B
   37:     200A C6 45                          LDAB #'E'
   38:                                         PUTC                                    ;SCI0 IS THE DEFAULT I/O PORT SO PUTC IS EQUIVALENT TO PUTC_SCI0        
   39:                                         PUTC_SCI0 CHAR2                 ;PUTC WITH 1 PARAMETER OUTPUTS CHARACTER REFERENCED BY PARAMETER (CHAR2 WAS DEFINED AS 'L')
   40:                                         PUTC CHAR2                              ;PUTC = PUTC_SCI0
   41:                                         PUTC #'O'                               ;THE PUTC PARAMETER MAY EITHER BE THE ADDRESS OF A CHARACTER OR THE ASCII CODE AS AN IMMEDIATE VALUE
   42:                                 
   43:                                         PUTS_SCI0 #NEWLINE              ;PUTS_SCI0 NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
   44:                                                                                 ;NEWLINE IS 3 CHARACTERS WHICH TELL THE TERMINAL TO MOVE THE CURSOR TO THE LEFT EDGE (CR), MOVE TO THE NEXT LINE (LF), AND INDICATE THE END OF THE STRING (NULL)
   45:                                 
   46:                                         PUTS_SCI0 #PROMPT1              ;BEGINNING AT THE ADDRESS DEFINED AS THE VALUE OF THE LABEL PROMPT1, OUTPUT EVERY BYTE AS AN ASCII CHARACTER TO RS-232 PORT SCI0 UNTIL REACHING THE FIRST NULL (ZERO).
   47:                                 
   48:                                         PUTS #STR2                              ;PUTS = PUTS_SCI0
   49:                                 
   50:                                         PUTS #PROMPT2                   ;PROMPT TO INPUT FIRST A CHARACTER THEN A STRING VIA SCI0
   51:                                 
   52:                                         GETC_SCI0                               ;GETC WITH NO PARAMETERS INPUTS TO REGISTER B
   53:                                                                                 ;NOTE: GETC = GETC_SCI0
   54:                                         PUTS #NEWLINE                   ;MOVE CURSOR TO NEXT LINE
   55:                                 
   56:                                         PUTC_SCI0                               ;PUTC WITH NO PARAMETERS OUTPUTS CHARACTER IN REGISTER B
   57:                                         PUTS #NEWLINE           
   58:                                 
   59:                                         GETS_SCI0 #STR1                 ;GETS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
   60:                                                                                 ;NOTE: GETS = GETS_SCI0
   61:                                         PUTS #NEWLINE           
   62:                                 
   63:                                         PUTS #STR1                      
   64:                                         PUTS #NEWLINE           
   65:                                 
   66:                                         PUTS_SCI0 #PROMPT3
   67:                                 
   68:                                         PUTS #STR2                      
   69:                                 
   70:                                         LCASE #STR2                     ;CONVERTS ALL ALPHABETICAL CHARACTERS IN STRING TO LOWER CASE
   71:                                                                                 ;LCASE NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
   72:                                         PUTS #STR2                      
   73:                                 
   74:                                         UCASE #STR2                     ;CONVERTS ALL ALPHABETICAL CHARACTERS IN STRING TO UPPER CASE
   75:                                                                                 ;UCASE NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
   76:                                         PUTS #STR2                      
   77:                                 
   78:                                         PUTS #PROMPT4           
   79:                                 
   80:                                         ITOA INT2, #STR1                ;CONVERT THE INTEGER INTO AN ASCII STRING
   81:                                         PUTS #STR1                      
   82:                                         PUTS #NEWLINE           
   83:                                 
   84:                                         ITOA_2 INT2, #STR1              ;CONVERT THE INTEGER INTO AN ASCII STRING
   85:                                         PUTS #STR1                      
   86:                                         PUTS #NEWLINE           
   87:                                 
   88:                                         ITOA_16 INT2, #STR1             ;CONVERT THE INTEGER INTO AN ASCII STRING
   89:                                         PUTS #STR1                      
   90:                                         PUTS #NEWLINE           
   91:                                 
   92:                                         ITOA_FIXED INT2, #STR1  ;CONVERT THE INTEGER INTO AN ASCII STRING
   93:                                         PUTS #STR1                      
   94:                                         PUTS #NEWLINE           
   95:                                 
   96:                                         ITOA_2_FIXED INT2, #STR1        ;CONVERT THE INTEGER INTO AN ASCII STRING
   97:                                         PUTS #STR1                      
   98:                                         PUTS #NEWLINE           
   99:                                 
  100:                                         ITOA_16_FIXED INT2, #STR1       ;CONVERT THE INTEGER INTO AN ASCII STRING
  101:                                         PUTS #STR1                      
  102:                                         PUTS #NEWLINE           
  103:                                 
  104:                                         PUTS #PROMPT5           
  105:                                 
  106:     21DC 180B 31 1002                   MOVB #'1',STR1                  ;CREATE A STRING "100" WHICH IS NULL-TERMINATED
  107:     21E1 180B 30 1003                   MOVB #'0',STR1+1
  108:     21E6 180B 30 1004                   MOVB #'0',STR1+2
  109:     21EB 180B 00 1005                   MOVB #NULL,STR1+3
  110:                                         PUTS #STR1                      
  111:                                         PUTS #NEWLINE           
  112:                                 
  113:                                         ATOI #STR1, INT1
  114:                                         ITOA INT1, #STR1                ;CONVERT THE INTEGER INTO AN ASCII STRING
  115:                                         PUTS #STR1                      
  116:                                         PUTS #NEWLINE           
  117:                                 
  118:     223C 180B 31 1002                   MOVB #'1',STR1
  119:     2241 180B 30 1003                   MOVB #'0',STR1+1
  120:     2246 180B 30 1004                   MOVB #'0',STR1+2
  121:     224B 180B 00 1005                   MOVB #NULL,STR1+3
  122:                                 
  123:                                         ATOI_2 #STR1, INT1
  124:                                         ITOA INT1, #STR1                ;CONVERT THE INTEGER INTO AN ASCII STRING
  125:                                         PUTS #STR1                      
  126:                                         PUTS #NEWLINE           
  127:                                 
  128:     2286 180B 31 1002                   MOVB #'1',STR1
  129:     228B 180B 30 1003                   MOVB #'0',STR1+1
  130:     2290 180B 30 1004                   MOVB #'0',STR1+2
  131:     2295 180B 00 1005                   MOVB #NULL,STR1+3
  132:                                 
  133:                                         ATOI_16 #STR1, INT1
  134:                                         ITOA INT1, #STR1                ;CONVERT THE INTEGER INTO AN ASCII STRING
  135:                                         PUTS #STR1                      
  136:                                         PUTS #NEWLINE   
  137:                                         PUTS #NEWLINE   
  138:                                 
  139:     22DB 180B 31 1002                   MOVB #'1',STR1
  140:     22E0 180B 37 1003                   MOVB #'7',STR1+1
  141:     22E5 180B 46 1004                   MOVB #'F',STR1+2
  142:     22EA 180B 00 1005                   MOVB #NULL,STR1+3
  143:                                         PUTS #STR1                      
  144:                                         PUTS #NEWLINE           
  145:                                 
  146:                                         ATOI_16 #STR1, INT1
  147:                                         ITOA INT1, #STR1                ;CONVERT THE INTEGER INTO AN ASCII STRING
  148:                                         PUTS #STR1                      
  149:                                         PUTS #NEWLINE           
  150:                                 
  151:                                  
  152:                                         PUTS_SCI0 #PROMPT6              ;PUTS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
  153:                                 
  154:                                         GETC_KEYPAD                     ;GETC WITH NO PARAMETERS INPUTS TO REGISTER B
  155:                                         PUTS_SCI0 #NEWLINE              ;PUTS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
  156:                                 
  157:                                         PUTC_SCI0                               ;PUTC WITH NO PARAMETERS OUTPUTS CHARACTER IN REGISTER B
  158:                                         PUTS_SCI0 #NEWLINE              ;PUTS NEEDS 1 PARAMETER WHICH RESOLVES TO 16-BIT ADDRESS OF START OF STRING
  159:                                 
  160:                                         LCD_SETUP                               ;INITIALIZE THE LCD SCREEN
  161:                                 
  162:                                         LCD_CURSOR 0,0                  ;MOVE THE LCD CURSOR TO ROW 0 COLUMN 0
  163:                                         PUTC_LCD                                ;PUT A CHARACER TO LCD
  164:                                 
  165:                                         LCD_CURSOR 1,0                  ;MOVE THE LCD CURSOR TO ROW 1, COLUMN 0
  166:                                 
  167:                                         PUTS_LCD #STR2
  168:                                         
  169:                                 
  170:                                         PUTS #NEWLINE           
  171:                                 
  172:                                         PUTS #PROMPT7
  173:                                 
  174:                                         STRLEN_DBUG12 #STR2             ;IF USING D-BUG12 AS AN OS, CALCULATE THE LENGTH OF THE STRING
  175:     23A4 7C 1075                        STD INT1                                ;STORE THE LENGTH OF THE STRING INTO INT1
  176:                                         PRINTF_DBUG12 #FORMAT1, #INT1, INT1, #STR2              ;PRINT THE STRING USING PRINTF BUILT INTO D-BUG12
  177:                                 
  178:                                         PUTS #NEWLINE           
  179:                                 
  180:                                         PUTS #PROMPT8
  181:                                 
  182:                                         GETCHAR_DBUG12                  ;THIS IS THE EQUIVALENT TO THE GETC ROUTINES INCLUDED IN D-BUG12
  183:                                         PRINTF_DBUG12 #NEWLINE
  184:                                         PUTCHAR_DBUG12                  ;THIS IS THE EQUIVALENT TO THE PUTC ROUTINES INCLUDED IN D-BUG12
  185:                                         PRINTF_DBUG12 #NEWLINE
  186:                                 
  187:                                 
  188:                                         PUTS #PROMPT9
  189:                                 
  190:                                         PRINTF_DBUG12 #STR1
  191:                                         PRINTF_DBUG12 #NEWLINE
  192:                                         PRINTF_DBUG12 #STR2
  193:                                         STRCPY_DBUG12 #STR1, #STR2              ;STRING COPY, REQUIRES D-BUG 12, OVERWRITES STR1 WITH STR2
  194:                                         PRINTF_DBUG12 #STR1
  195:                                         PRINTF_DBUG12 #STR2
  196:                                 
  197:                                         PUTS #NEWLINE           
  198:                                         PUTS #NEWLINE           
  199:                                 
  200:     246A 3D                             RTS
